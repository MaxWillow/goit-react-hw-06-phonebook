{"version":3,"sources":["transitions/pop.module.css","components/ContactList/ContactItem.module.css","components/Notification/Notification.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/reducers.js","redux/types.js","redux/rootReducer.js","redux/store.js","utils/localeStorage.js","components/Notification/Notification.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactFormContainer.js","redux/actions.js","components/Filter/Filter.jsx","components/Filter/FilterContainer.js","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactListContainer.js","components/PhoneBook.jsx","components/App.jsx","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","combineReducers","contacts","state","type","payload","contact","filter","id","value","notifyText","text","rootReducer","phoneBook","phoneBookReducer","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadStateFromLS","store","createStore","devToolsEnhancer","subscribe","existedData","stringify","setItem","alert","saveToLS","getState","Notification","className","styles","notifyContainer","defaultProps","getContacts","getSearhValue","getFilteredContacts","createSelector","searchValue","name","toLowerCase","includes","getNotifyMessage","ContactForm","number","handleChange","e","setState","target","handleSubmit","preventDefault","message","props","onAddContact","showNotifyWithMessage","find","setTimeout","uuidv4","this","onSubmit","form","htmlFor","label","onChange","input","pattern","button","Component","connect","selectors","dispatch","actions","Filter","filterValue","onFilterChange","placeholder","ContactItem","onDeleteContact","outline","onClick","ContactList","filteredContacts","TransitionGroup","component","list","map","CSSTransition","key","timeout","classNames","popTransition","containerStyles","marginLeft","marginRight","width","fontFamily","style","in","appear","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e550cb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1Y5tE\",\"enterActive\":\"pop_enterActive__YZ-Co\",\"exit\":\"pop_exit__3K6j1\",\"exitActive\":\"pop_exitActive__1wD6d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outline\":\"ContactItem_outline__2uoc6\",\"text\":\"ContactItem_text__1j1AS\",\"button\":\"ContactItem_button__2E-38\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notifyContainer\":\"Notification_notifyContainer__p86ka\",\"notifyText\":\"Notification_notifyText__1UNWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__itDRV\",\"input\":\"Filter_input__3DT6o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2WFvk\"};","import { combineReducers } from 'redux';\nimport * as types from './types';\n\nconst contactReducer = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD_CONTACT:\n      return [payload.contact, ...state];\n\n    case types.DELETE_CONTACT:\n      return state.filter(contact => contact.id !== payload.id);\n\n    default:\n      return state;\n  }\n};\n\nconst searchReducer = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.SEARCH_CONTACT:\n      return payload.value;\n\n    default:\n      return state;\n  }\n};\n\nconst notifyReducer = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.SHOW_NOTIFICATION:\n      return payload.text;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  contacts: contactReducer,\n  filter: searchReducer,\n  notifyText: notifyReducer,\n});\n","export const ADD_CONTACT = 'ADD_CONTACT';\nexport const SEARCH_CONTACT = 'SEARCH_CONTACT';\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\n","import { combineReducers } from 'redux';\nimport phoneBookReducer from './reducers';\n\nconst rootReducer = combineReducers({\n  phoneBook: phoneBookReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\nimport { saveToLS, loadStateFromLS } from '../utils/localeStorage';\n\nconst persistedState = loadStateFromLS();\n\nconst store = createStore(rootReducer, persistedState, devToolsEnhancer());\n\nstore.subscribe(() => saveToLS(store.getState()));\n\nexport default store;\n","export function saveToLS(state) {\n  try {\n    const existedData = JSON.stringify(state);\n    localStorage.setItem('state', existedData);\n  } catch {\n    // eslint-disable-next-line no-alert\n    alert('Something went wrong...');\n  }\n}\n\nexport function loadStateFromLS() {\n  try {\n    const serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Notification.module.css';\n\nconst Notification = ({ text }) => (\n  <div className={styles.notifyContainer}>\n    <p className={styles.notifyText}>{text}</p>\n  </div>\n);\n\nNotification.propTypes = {\n  text: T.string,\n};\n\nNotification.defaultProps = {\n  text: 'Please check your input. Try again.',\n};\n\nexport default Notification;\n","import { createSelector } from 'reselect';\n\nexport const getContacts = store => store.phoneBook.contacts;\n\nexport const getSearhValue = store => store.phoneBook.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getSearhValue],\n  (contacts, searchValue) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(searchValue.toLowerCase()),\n    ),\n);\n\nexport const getNotifyMessage = store => store.phoneBook.notifyText;\n","import React, { Component } from 'react';\nimport T from 'prop-types';\nimport uuidv4 from 'uuid/v4';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    contacts: T.arrayOf(\n      T.shape({\n        name: T.string.isRequired,\n        number: T.string.isRequired,\n        id: T.string.isRequired,\n      }).isRequired,\n    ).isRequired,\n    onAddContact: T.func.isRequired,\n    showNotifyWithMessage: T.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { contacts, onAddContact, showNotifyWithMessage } = this.props;\n\n    const existedContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    let message;\n\n    if (existedContact) {\n      message = `${name} is already in contacts`;\n      showNotifyWithMessage(message);\n      setTimeout(() => showNotifyWithMessage(''), 2500);\n    } else if (name && number) {\n      onAddContact({\n        name,\n        number,\n        id: uuidv4(),\n      });\n    } else {\n      message = 'Please fill the empty fields';\n      showNotifyWithMessage(message);\n      setTimeout(() => showNotifyWithMessage(''), 2500);\n    }\n\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label htmlFor=\"name\" className={styles.label}>\n          Name\n          <input\n            id=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            className={styles.input}\n          />\n        </label>\n        <label htmlFor=\"number\" className={styles.label}>\n          Number\n          <input\n            id=\"number\"\n            type=\"tel\"\n            pattern=\"[0-9]{10}\"\n            value={number}\n            onChange={this.handleChange}\n            className={styles.input}\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\nimport * as selectors from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getContacts(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(actions.addContact(contact)),\n  showNotifyWithMessage: text => dispatch(actions.showNotify(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import * as types from './types';\n\nexport const addContact = contact => ({\n  type: types.ADD_CONTACT,\n  payload: {\n    contact,\n  },\n});\n\nexport const deleteContact = id => ({\n  type: types.DELETE_CONTACT,\n  payload: {\n    id,\n  },\n});\n\nexport const searchContact = value => ({\n  type: types.SEARCH_CONTACT,\n  payload: {\n    value,\n  },\n});\n\nexport const showNotify = text => ({\n  type: types.SHOW_NOTIFICATION,\n  payload: {\n    text,\n  },\n});\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ filterValue, onFilterChange }) => (\n  <div>\n    <p className={styles.text}>Find contacts by name</p>\n    <input\n      id=\"filter\"\n      value={filterValue}\n      placeholder=\"Print the name that you want to find...\"\n      onChange={e => onFilterChange(e.target.value)}\n      className={styles.input}\n    />\n  </div>\n);\n\nFilter.defaultProps = {\n  filterValue: '',\n};\n\nFilter.propTypes = {\n  filterValue: T.string,\n  onFilterChange: T.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport * as selectors from '../../redux/selectors';\nimport Filter from './Filter';\n\nconst mapStateToProps = store => ({\n  filterValue: selectors.getSearhValue(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFilterChange: value => dispatch(actions.searchContact(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './ContactItem.module.css';\n\nconst ContactItem = ({ contact, onDeleteContact }) => (\n  <li className={styles.outline}>\n    <p className={styles.text}>{`${contact.name}: ${contact.number}`}</p>\n    <button type=\"button\" onClick={onDeleteContact} className={styles.button}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  contact: T.shape({\n    name: T.string.isRequired,\n    number: T.string.isRequired,\n  }).isRequired,\n  onDeleteContact: T.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport T from 'prop-types';\nimport ContactItem from './ContactItem';\nimport styles from './ContactList.module.css';\nimport popTransition from '../../transitions/pop.module.css';\n\nconst ContactList = ({ filteredContacts, onDeleteContact }) => (\n  <TransitionGroup component=\"ul\" className={styles.list}>\n    {filteredContacts.map(contact => (\n      <CSSTransition key={contact.id} timeout={250} classNames={popTransition}>\n        <ContactItem\n          contact={contact}\n          onDeleteContact={() => onDeleteContact(contact.id)}\n        />\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactList.propTypes = {\n  filteredContacts: T.arrayOf(\n    T.shape({\n      name: T.string.isRequired,\n      number: T.string.isRequired,\n      id: T.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: T.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport * as selectors from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = store => ({\n  filteredContacts: selectors.getFilteredContacts(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport T from 'prop-types';\nimport Notification from './Notification/Notification';\nimport ContactForm from './ContactForm/ContactFormContainer';\nimport Filter from './Filter/FilterContainer';\nimport ContactList from './ContactList/ContactListContainer';\nimport '../transitions/slide-appear.css';\nimport popTransition from '../transitions/pop.module.css';\nimport * as selectors from '../redux/selectors';\n\nconst containerStyles = {\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  width: 355,\n  fontFamily: 'Roboto',\n};\n\nconst PhoneBook = ({ contacts, notifyText }) => (\n  <div style={containerStyles}>\n    <CSSTransition in timeout={500} classNames=\"slide\" appear>\n      <h2>Phonebook</h2>\n    </CSSTransition>\n\n    <TransitionGroup>\n      {notifyText && (\n        <CSSTransition timeout={250} classNames={popTransition}>\n          <Notification text={notifyText} />\n        </CSSTransition>\n      )}\n    </TransitionGroup>\n\n    <ContactForm />\n\n    <h2>Contacts</h2>\n    <TransitionGroup>\n      {contacts.length > 1 && (\n        <CSSTransition timeout={250} classNames={popTransition}>\n          <Filter />\n        </CSSTransition>\n      )}\n    </TransitionGroup>\n\n    <ContactList />\n  </div>\n);\n\nPhoneBook.propTypes = {\n  contacts: T.arrayOf(\n    T.shape({\n      name: T.string.isRequired,\n      number: T.string.isRequired,\n      id: T.string.isRequired,\n    }),\n  ).isRequired,\n  notifyText: T.string.isRequired,\n};\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getContacts(store),\n  notifyText: selectors.getNotifyMessage(store),\n});\n\nexport default connect(mapStateToProps)(PhoneBook);\n","import React from 'react';\nimport PhoneBook from './PhoneBook';\n\nconst App = () => <PhoneBook />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1QOmv\",\"label\":\"ContactForm_label__1_6Ep\",\"input\":\"ContactForm_input__37DcB\",\"button\":\"ContactForm_button__3E-FY\"};"],"sourceRoot":""}